# module load snakemake fastqc flash2 kraken2 bracken multiqc r
import glob
ACCNUMS, = glob_wildcards("../data/sra_fastq/{accnum}_1.fastq.gz") 

#OR you can 
#from numpy import loadtxt
#ACCNUMS = loadtxt('../analyses/yuying_run_accessions.txt',dtype='str')

#print(ACCNUMS)

rule all:
    input:
        expand(["fastqc/{accnum}_{dir}_fastqc.html", "heatmap/heatmap_all.pdf", "multiqc/yuying-sample-sub-set_multiqc_report.html"], accnum=ACCNUMS, dir=[1,2])

## Perform fastqc for raw fastq data
rule fastqc:
    input:
        fq1 = "../data/sra_fastq/{accnum}_1.fastq.gz",
        fq2 = "../data/sra_fastq/{accnum}_2.fastq.gz"
    output:
        "fastqc/{accnum}_1_fastqc.html",
        "fastqc/{accnum}_2_fastqc.html"
    params:
        outdir="fastqc"
    threads: 4
    resources: cpus=4, mem_mb=2000, time_min=20
    shell:
        "fastqc --outdir {params.outdir} --threads {threads} --noextract {input.fq1} {input.fq2}"

## Merge raw fastq data by flash2
rule flash2:
    input:
        fq1 = "../data/sra_fastq/{accnum}_1.fastq.gz",
        fq2 = "../data/sra_fastq/{accnum}_2.fastq.gz"
    output:
        "flash2/{accnum}.flash.histogram",
        "flash2/{accnum}.flash.notCombined_1.fastq.gz",
        "flash2/{accnum}.flash.notCombined_2.fastq.gz",
        "flash2/{accnum}.flash.extendedFrags.fastq.gz"
    params:
        outdir="flash2"
    threads: 4
    resources: cpus=4, mem_mb = 2000, time_min = 20
    shell:
        "flash2 --threads {threads} -z --output-directory={params.outdir} --output-prefix={wildcards.accnum}.flash {input.fq1} {input.fq2} 2>&1 | tee flash2/yuying_flash2.log"
        
## Taxonomic by kraken2
rule kraken2:
    input:
        fq1 = "../data/sra_fastq/{accnum}_1.fastq.gz",
        fq2 = "../data/sra_fastq/{accnum}_2.fastq.gz"
    output:
        out="kraken2/{accnum}_kraken_out.txt",
        report="kraken2/{accnum}_kraken_report.txt"
    threads: 1
    resources: cpus=1, mem_mb=65000, time_min=15
    shell:
        "kraken2 --threads {threads} -db /shared/projects/form_2022_19/kraken2/arch_bact_vir_hum_protoz_fung/ --paired --output {output.out} --report {output.report} --gzip-compressed {input.fq1} {input.fq2}"
       
## Estimate species level abundances by bracken      
rule bracken:
    input:
        "kraken2/{accnum}_kraken_report.txt"
    output:
        out="bracken/{accnum}_kraken_bracken.txt",
        report="bracken/{accnum}_kraken_bracken_report.txt"
    params:
        db="/shared/projects/form_2022_19/kraken2/arch_bact_vir_hum_protoz_fung/"
    resources: cpus=4, mem_mb = 2000, time_min = 20
    shell:
        "bracken -d {params.db} -i {input} -o {output.out} -w {output.report} -r 50 -l S -t 5"
        
## Combine qc to Multiqc
rule multiqc:
    input:
        # Specify at least one input (that should have been generated by any of the other rules) in each folder to establish dependency, but not used directly in command
        expand(["fastqc/{accnum}_1_fastqc.html",
        "flash2/{accnum}.flash.extendedFrags.fastq.gz",
        "kraken2/{accnum}_kraken_report.txt",
        "bracken/{accnum}_kraken_bracken_report.txt"],accnum=ACCNUMS)
    output:
        "multiqc/yuying-sample-sub-set_multiqc_report.html"
    resources: cpus=1, mem_mb=1000, time_min=10
    shell:
        "multiqc --force --title 'yuying sample sub-set' fastqc/ flash2/ flash2/yuying_flash2.log kraken2/ bracken/ --outdir multiqc/"
 
 
## Make heatmap based on bracken report
rule heatmap:
    input:
        expand("bracken/{accnum}_kraken_bracken.txt", accnum=ACCNUMS)
    output:
        expand("heatmap/heatmap_{subset}.pdf", subset=["all", "pat"])
    resources: cpus=4, mem_mb = 2000, time_min = 20
    script:
        "scripts/make_heatmap.R"
